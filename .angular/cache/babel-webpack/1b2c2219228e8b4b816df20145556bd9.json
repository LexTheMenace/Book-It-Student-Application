{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators'; // import { environment } from 'src/environments/environment';\n\nimport { User } from './User.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n      this.token = null;\n    }\n\n    signUp(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + 'AIzaSyDskLrLIPsk4EsBBqIe0Yxg8YcDS5Qhie8', {\n        email,\n        password,\n        returnSecureToken: true\n      }).pipe(tap(res => this.handleAuthentication(res.email, res.localId, res.idToken, res.expiresIn)));\n    }\n\n    signIn(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + 'AIzaSyDskLrLIPsk4EsBBqIe0Yxg8YcDS5Qhie8', {\n        email,\n        password,\n        returnSecureToken: true\n      }).pipe(tap(auth => {\n        this.handleAuthentication(auth.email, auth.localId, auth.idToken, auth.expiresIn);\n      }));\n    }\n\n    logout() {\n      this.user.next(null);\n\n      if (this.autoLogoutTimer) {\n        clearTimeout(this.autoLogoutTimer);\n        this.autoLogoutTimer = null;\n      }\n\n      localStorage.removeItem('userData');\n      this.router.navigate(['/auth']);\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const user = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (user.token) {\n        this.user.next(user);\n        const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime(); // future date minus today's date\n        // gives us the duration of how much longer we have\n\n        this.autoLogout(expirationDuration);\n      }\n    }\n\n    autoLogout(expTime) {\n      this.autoLogoutTimer = setTimeout(() => {\n        this.logout();\n      }, expTime);\n    }\n\n    handleAuthentication(email, id, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + +expiresIn * 1000);\n      const user = new User(email, id, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(+expiresIn * 1000);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}